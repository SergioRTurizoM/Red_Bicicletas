{"version":3,"sources":["app.js"],"names":["createError","require","express","cookieParser","passport","path","usersRouter","logger","bicicletasAPIRouter","deserializeUser","indexRouter","bicicletasRouter","mongoose","connect","mongoDB","useNewUrlParser","db","connection","on","usuarioAPIROuter","console","app","set","join","__dirname","json","extended","use","Promise","global","req","res","render","urlencoded","next","redirect","get","locals","message","err","status","module","exports"],"mappings":"aAAA,IAAIA,YAAcC,QAAQ,eACtBC,QAAUD,QAAQ,WADlBD,KAAAA,QAAcC,QAGdE,aAAeF,QAAQ,iBAFvBC,OAAOD,QAAU,UAIfG,SAAWH,QAAQ,oBAHrBI,gBAAeJ,QAAnB,uBACIE,YAAYF,QAAU,kBAMtBK,YAAcL,QAAQ,kBALtBM,iBAAiBN,QAArB,uBAOIO,oBAAsBP,QAAQ,2BAN5BG,iBAAmBH,QAAA,yBACnBQ,MAAAA,IAAAA,QAAkBR,YAEpBS,IAAAA,UACAJ,SAAWL,QAAGA,YACdU,QAAAA,qCAWJC,SAASC,QAAQC,QAAS,CAAEC,iBAAiB,IAV7CH,SAAIJ,QAAAA,OAAsBP,QAY1B,IAAIe,GAAKJ,SAASK,WAXlBD,GAAAE,GAAIC,QAAAA,QAAmBlB,MAAAA,KAASmB,QAAA,+BAgBhCC,IAAIC,IAAI,QAASjB,KAAKkB,KAAKC,UAAW,UAVtCH,IAAIT,IAAAA,cAAmB,OAEvBS,IAAIP,IAAAA,OAAU,QACdF,IAAAA,IAAQV,QAARuB,QAA4BV,IAAAA,IAAAA,QAAAA,WAAiB,CAAAW,UAAA,KAAnBL,IAA1BM,IAAAxB,gBACAS,IAAAA,IAAQV,QAAC0B,OAAUC,KAAOD,KAA1BJ,UAAA,YAEAR,IAAGE,IAAG,SAASE,SAAAU,EAAAC,GAcbA,EAAIC,OAAO,mBAPbX,IAAIM,IAAIpB,IAAAA,aACRc,IAAIM,IAAIzB,SAAQuB,aAChBJ,IAAIM,IAAIzB,cAAQ+B,kBAAaP,IAAAA,IAAAA,kBAAUlB,qBAEvCa,IAAIM,IAAIzB,SAAO4B,EAAAC,EAAQ1B,GAEvBgB,EAAArB,YAAkB,QAKlBqB,IAAIM,KAAI,SAAUrB,SAAAA,EAAlByB,EAAAG,MAKAb,IAAIM,IAAI,UAASG,SAAUI,EAAnBH,EAAyBG,GAC/BA,EAAIC,SAACnC,OAMNqB,IAFDe,IAAA,kBAAA,SAAAN,EAAAC,MAQAV,IAAIe,KAAK,kBAAmB,SAASN,EAAKC,MAWxCA,IAAAA,IAAIM,SAAOC,EAAXR,EAAyBQ,EAAAA,GAAzBP,EAAIM,OAAOC,QAAUC,EAAID,QAIzBP,EAAIS,OAAOD,MAAX,gBAAeC,EAAJnB,IAAce,IAAzB,OAAAG,EAAA,GAIFE,EAAMD,OAACE,EAAUrB,QAAjB,KAHEU,EAAIC,OAAO,WAGbS,OAAOC,QAAUrB","file":"app.min.js","sourcesContent":["var createError = require('http-errors');\nvar express = require('express');\nvar path = require('path');\nvar cookieParser = require('cookie-parser');\nvar logger = require('morgan');\nconst passport = require('/config/passport');\nconst deserializeUser = require ('/config/passport.js');\n\nvar indexRouter = require('./routes/index');\nvar usersRouter = require('./routes/users');\nvar bicicletasRouter = require('./routes/bicicletas');\nvar bicicletasAPIRouter = require('./routes/api/bicicletas');\nvar usuarioAPIROuter = require ('./routes/api/usuarios');\n\nconst store = new session.MemoryStore; \n\nvar app = express();\n\nvar mongoose = require('mongoose');\n\nvar mongoDB = 'mongodb://localhost/red_bicicletas';\nmongoose.connect(mongoDB, { useNewUrlParser: true});\nmongoose.Promise = global.Promise;\nvar db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'MongoDB connection error: '));\n\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'pug');\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.get('/login', function (req, res) {\n  res.render('session/login');\n});\n\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\napp.use('/bicicletas', bicicletasRouter);\napp.use('/api/bicicletas', bicicletasAPIRouter);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n\n\napp.post('/login', function(req, res, next) {\n  //passport\n});\n\napp.get('/logout', function(req, res, next) {\n  res.redirect('/');\n});\n\napp.get ('/forgotPassword', function(req, res) {\n\n});\n\napp.post('/forgotPassword', function(req, res){\n  \n})\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;\n"]}