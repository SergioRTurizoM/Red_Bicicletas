{"version":3,"sources":["app.js"],"names":["createError","require","express","cookieParser","path","usersRouter","bicicletasAPIRouter","app","mongoose","mongoDB","bicicletasRouter","Promise","global","db","on","console","error","bind","set","join","__dirname","useNewUrlParser","use","json","urlencoded","indexRouter","logger","req","res","next","err","locals","message","status"],"mappings":"aAAA,IAAIA,YAAcC,QAAQ,eACtBC,QAAUD,QAAQ,WADlBD,KAAAA,QAAcC,QAGdE,aAAeF,QAAQ,iBAFvBC,OAAOD,QAAU,UACjBG,YAAcH,QAAlB,kBAKII,YAAcJ,QAAQ,kBAJtBE,iBAAeF,QAAQ,uBAMvBK,oBAAsBL,QAAQ,2BAE9BM,IAAML,UAENM,SAAWP,QAAQ,YAEnBQ,QAAU,qCAPdD,SAAIE,QAAAA,QAAmBT,CAAAA,iBAAQ,IAS/BO,SAASG,QAAUC,OAAOD,QAR1B,IAAIL,GAAAA,SAAAA,WAUJO,GAAGC,GAAG,QAASC,QAAQC,MAAMC,KAAKF,QAAS,+BAI3CR,IAAIW,IAAI,QAASd,KAAKe,KAAKC,UAAW,UARtCb,IAAIE,IAAAA,cAAU,OACcY,IAAAA,IAAAA,OAAAA,QAAFd,IAA1Be,IAAApB,QAAAqB,QACAf,IAAAA,IAAQN,QAARsB,WAA0Bb,CAAAA,UAA1B,KACAJ,IAAIM,IAAEV,gBACNU,IAAGC,IAAGZ,QAASa,OAAQC,KAARG,KAAAC,UAA4B,YAI3Cb,IAAIW,IAAI,IAAAO,aACRlB,IAAIW,IAAI,SAAAb,aAERE,IAAIe,IAAII,cAARhB,kBACAH,IAAIe,IAAIpB,kBAARI,qBAC2BC,IAA3Be,IAAA,SAAAK,EAAAC,EAAAC,GACAtB,EAAAP,YAAQG,QAKRI,IAAIe,IAAI,SAAAQ,EAARH,EAAuBjB,EAAAA,GAWrBkB,EAAIG,OAAOC,QAAUF,EAAIE,QAP3BzB,EAAIe,OAAIN,MAAyB,gBAAzBW,EAAcC,IAAKC,IAAnB,OAAyBC,EAAA,GAW/BF,EAAIK,OAAOH,EAAIG,QAAU,KAN3B1B,EAAIe,OAAI,WAGNM,OAAIG,QAAOf","file":"app.min.js","sourcesContent":["var createError = require('http-errors');\nvar express = require('express');\nvar path = require('path');\nvar cookieParser = require('cookie-parser');\nvar logger = require('morgan');\n\nvar indexRouter = require('./routes/index');\nvar usersRouter = require('./routes/users');\nvar bicicletasRouter = require('./routes/bicicletas');\nvar bicicletasAPIRouter = require('./routes/api/bicicletas');\n\nvar app = express();\n\nvar mongoose = require('mongoose');\n\nvar mongoDB = 'mongodb://localhost/red_bicicletas';\nmongoose.connect(mongoDB, { useNewUrlParser: true});\nmongoose.Promise = global.Promise;\nvar db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'MongoDB connection error: '));\n\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'pug');\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\napp.use('/bicicletas', bicicletasRouter);\napp.use('/api/bicicletas', bicicletasAPIRouter);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;\n"]}