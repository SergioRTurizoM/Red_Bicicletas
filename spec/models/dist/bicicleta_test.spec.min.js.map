{"version":3,"sources":["bicicleta_test.spec.js"],"names":["mongoose","require","describe","done","beforeEach","connection","on","console","error","bind","once","log","Bicicleta","deleteMany","err","success","bici","expect","createInstance","ubicacion","toBe","toEqual","modelo","it","allBicis","bicis","length","addListener","aBici","code","newBici"],"mappings":"aACA,IAAIA,SAAWC,QAAQ,YAAnBD,UAAWC,QAAQ,0BAIvBC,SAAS,qBAAsB,WAA/BA,WAAS,SAAAC,GACLC,IAGeJ,EAAAA,SAASK,WACjBC,EAAGA,GAAA,QAASC,QAAQC,MAARC,KAAmBF,QAAS,qBACxCG,EAAHA,KAAQ,OAAQ,WACZH,QAAYI,IAAA,qCACRR,QAKZS,UAAAA,SAAUC,GACND,UAAAC,WAAiBF,GAAIG,SAAZA,EAAAC,GACLD,GAAAP,QAAAI,IAAAG,GAFRX,QAQQD,SAAIc,2BAAO,WAEXC,GAAAA,kCAAA,WACM,IAACD,EAADJ,UAAkBM,eAAxB,EAAA,QAAA,SAAA,EAAA,MAAA,OAEMD,OAAME,EAAAA,MAANC,KAAoBC,GACpBJ,OAAME,EAAAA,OAAZC,KAA0BC,SAP9BJ,OAAAD,EAAAM,QAAAF,KAAA,UADJH,OAAAD,EAAAG,UAAA,IAAAE,SAAA,MAYSJ,OAAAD,EAAAG,UAAsB,IAAAE,SAAM,UAIzBlB,SAAI,qBAAA,WAFRoB,GAAA,iBAAA,SAAApB,GADJS,UAAAY,SAAA,SAAAV,EAAAW,GADJR,OAAAQ,EAAAC,QAAAN,KAAA,GASSjB,UAEkDmB,SAAAA,gBAAQ,WAA3DC,GAAA,uBAAA,SAAApB,GACAS,IAAUe,EAAAA,IAAYC,UAAO,CAAAC,KAAA,EAASf,MAAKgB,QAAQR,OAAA,WAC5CR,UAAKP,YAAAqB,EAAA,SAAAd,EAAAgB,GACEN,GAAAA,QAASb,IAAAG,GACTF,UAAOc,SAAQL,SAArBP,EAAAW,GACOA,OAASI,EAAMR,QAAQO,QAAMC,GAChCZ,OAAAQ,EAAA,GAAAI,MAAAR,QAAAO,EAAAC,MAHR1B","file":"bicicleta_test.spec.min.js","sourcesContent":["\nvar mongoose = require('mongoose');\nvar Bicicleta = require('../../models/bicicleta');\n\n\ndescribe('Testing Bicicletas', function() {\n    beforeEach(function(done) {\n        var mongoDB = 'mongodb://localhost/testdb';\n\n        const db = mongoose.connection;\n        db.on('error', console.error.bind(console, 'connection error'));\n        db.once('open', function(){\n            console.log('We are connected to test database');\n            done();\n        });\n    });\n\nafterEach(function(done) {\n    Bicicleta.deleteMany({}, function(err, success){\n        if (err) console.log(err);\n        done();\n        });\n    });\n\n    describe('Bicicleta.createInstance', () => {\n        it('crea una instancia de Bicicleta', ()=> {\n            var bici = Bicicleta.createInstance(1,\"verde\", \"urbana\", [-34.5, -54.1]);\n\n            expect(bici.code).toBe(1);\n            expect(bici.color).toBe(\"verde\");\n            expect(bici.modelo).toBe(\"urbana\");\n            expect(bici.ubicacion[0]).toEqual(-34.5);\n            expect(bici.ubicacion[1]).toEqual(-54.1);\n        })\n    });\n\n    describe('Bicicleta.allBicis', () => {\n        it('comienza vacía', (done) => {\n            Bicicleta.allBicis(function(err,bicis){\n                expect(bicis.length).toBe(0);\n                done();\n            });\n        });\n    });\n\n    describe('Bicicleta add', () => {\n        it('agrega solo una bici', (done) => {\n            var aBici = new Bicicleta({code:1, color: \"verde\", modelo: \"urbana\"});\n            Bicicleta.addListener(aBici, function(err, newBici){\n                if(err) console.log(err);\n                Bicicleta.allBicis(function(err, bicis){\n                    expect(bicis.length).toEqual(1);\n                    expect(bicis[0].code).toEqual(aBici.code);\n                    done();\n                });\n            });\n        });\n    });\n\n    \n\n});\n\n// beforeEach(() => { Bicicleta.allBicis = [];  });\n\n// describe('Bicicleta.allBicis', ()=> {\n    \n//     it('comienza vacía', ()=>{\n//         expect(Bicicleta.allBicis.length).toBe(0);\n//     });\n// });\n\n\n// describe('Bicicleta.add', () => {\n//     it('agregamos una', () => {\n//         expect(Bicicleta.allBicis.length).toBe(0);\n\n//         var a = new Bicicleta (1, 'rojo', 'urbana', [-34.601224, -58.3861497]);\n//         Bicicleta.add(a);\n\n//         expect(Bicicleta.allBicis.length).toBe(1);\n//         expect(Bicicleta.allBicis[0]).toBe(a);\n//     });\n// });\n\n// describe('Bicicleta.findById', () => {\n//     it('debe devolver la bici con id 1', ()=>{\n//         expect(Bicicleta.allBicis.length).toBe(0);\n//         var aBici = new Bicicleta(1, 'verde', 'urbana');\n//         var aBici2 = new Bicicleta(2, 'verde', 'urbana');\n//         Bicicleta.add(aBici);\n//         Bicicleta.add(aBici2);\n\n//         var targetBici = Bicicleta.findById(1);\n//         expect(targetBici.id).toBe(1);\n//         expect(targetBici.color).toBe(aBici.color);\n//         expect(targetBici.modelo).toBe(aBici.modelo);\n\n//     });\n// });"]}