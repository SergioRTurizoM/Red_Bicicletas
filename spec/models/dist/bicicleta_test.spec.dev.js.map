{"version":3,"sources":["bicicleta_test.spec.js"],"names":["mongoose","require","Bicicleta","describe","beforeEach","done","mongoDB","db","connection","on","console","error","bind","once","log","afterEach","deleteMany","err","success","it","bici","createInstance","expect","code","toBe","color","modelo","ubicacion","toEqual","allBicis","bicis","length","aBici","addListener","newBici"],"mappings":"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","sourcesContent":["\nvar mongoose = require('mongoose');\nvar Bicicleta = require('../../models/bicicleta');\n\n\ndescribe('Testing Bicicletas', function() {\n    beforeEach(function(done) {\n        var mongoDB = 'mongodb://localhost/testdb';\n\n        const db = mongoose.connection;\n        db.on('error', console.error.bind(console, 'connection error'));\n        db.once('open', function(){\n            console.log('We are connected to test database');\n            done();\n        });\n    });\n\nafterEach(function(done) {\n    Bicicleta.deleteMany({}, function(err, success){\n        if (err) console.log(err);\n        done();\n        });\n    });\n\n    describe('Bicicleta.createInstance', () => {\n        it('crea una instancia de Bicicleta', ()=> {\n            var bici = Bicicleta.createInstance(1,\"verde\", \"urbana\", [-34.5, -54.1]);\n\n            expect(bici.code).toBe(1);\n            expect(bici.color).toBe(\"verde\");\n            expect(bici.modelo).toBe(\"urbana\");\n            expect(bici.ubicacion[0]).toEqual(-34.5);\n            expect(bici.ubicacion[1]).toEqual(-54.1);\n        })\n    });\n\n    describe('Bicicleta.allBicis', () => {\n        it('comienza vacía', (done) => {\n            Bicicleta.allBicis(function(err,bicis){\n                expect(bicis.length).toBe(0);\n                done();\n            });\n        });\n    });\n\n    describe('Bicicleta add', () => {\n        it('agrega solo una bici', (done) => {\n            var aBici = new Bicicleta({code:1, color: \"verde\", modelo: \"urbana\"});\n            Bicicleta.addListener(aBici, function(err, newBici){\n                if(err) console.log(err);\n                Bicicleta.allBicis(function(err, bicis){\n                    expect(bicis.length).toEqual(1);\n                    expect(bicis[0].code).toEqual(aBici.code);\n                    done();\n                });\n            });\n        });\n    });\n\n    \n\n});\n\n// beforeEach(() => { Bicicleta.allBicis = [];  });\n\n// describe('Bicicleta.allBicis', ()=> {\n    \n//     it('comienza vacía', ()=>{\n//         expect(Bicicleta.allBicis.length).toBe(0);\n//     });\n// });\n\n\n// describe('Bicicleta.add', () => {\n//     it('agregamos una', () => {\n//         expect(Bicicleta.allBicis.length).toBe(0);\n\n//         var a = new Bicicleta (1, 'rojo', 'urbana', [-34.601224, -58.3861497]);\n//         Bicicleta.add(a);\n\n//         expect(Bicicleta.allBicis.length).toBe(1);\n//         expect(Bicicleta.allBicis[0]).toBe(a);\n//     });\n// });\n\n// describe('Bicicleta.findById', () => {\n//     it('debe devolver la bici con id 1', ()=>{\n//         expect(Bicicleta.allBicis.length).toBe(0);\n//         var aBici = new Bicicleta(1, 'verde', 'urbana');\n//         var aBici2 = new Bicicleta(2, 'verde', 'urbana');\n//         Bicicleta.add(aBici);\n//         Bicicleta.add(aBici2);\n\n//         var targetBici = Bicicleta.findById(1);\n//         expect(targetBici.id).toBe(1);\n//         expect(targetBici.color).toBe(aBici.color);\n//         expect(targetBici.modelo).toBe(aBici.modelo);\n\n//     });\n// });"],"file":"bicicleta_test.spec.dev.js"}