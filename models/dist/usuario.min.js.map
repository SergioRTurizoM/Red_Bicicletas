{"version":3,"sources":["usuario.js"],"names":["mongoose","require","uniqueValidator","bcrypt","Schema","validateEmail","email","UsuarioSchema","nombre","test","type","String","trim","required","lowercase","unique","validate","match","password","Date","Boolean","passwordResetToken","usuarioSchema","plugin","message","pre","next","this","isMOdified","hashSync","saltRounds","methods","validPassword","compareSync","reservar","biciId","desde","hasta","cb","reserva","Reserva","usuario","id_","bicicleta","cd","model"],"mappings":"aAAA,IAAIA,SAAWC,QAAQ,YACjBC,gBAAkBD,QAAS,6BAD7BD,QAAQC,QAAW,aAGjBE,OAASF,QAAQ,UAFjBC,WAAe,GAMjBE,OAASJ,SAASI,OAEhBC,cAAgB,SAASC,GAF3BF,MAHY,wHAGHJ,KAAAA,IAGTO,cAAU,IAAAH,OAAA,CACVI,OAAUC,CAFdC,KAAAC,OAQQC,MAAM,EAHVL,SAAa,EAAA,EAAOH,6BAEhBM,MAAMC,CACFD,KAFAC,OAGJE,MAAU,EAJcA,SAAA,EAAA,EAAA,2BAMvBC,WAAE,EACCC,QADD,EAECC,SAFD,CAAAX,cAAA,sCAGHQ,MAAW,CAAA,0HAEXE,SAAQ,CACRC,KAAUL,OACVM,SAAQ,EAAA,EAAA,+BAEZC,mBAAUP,OACND,0BADMS,KAENN,WAAW,CAjBaH,KAAAU,QAmB5BC,SAAAA,KAEYC,cAAAC,OAAArB,gBAAA,CAAAsB,QAAA,yCAOyBA,cAASC,IAAA,OAAA,SAAAC,GAGlDJ,KAAAA,WAAkB,cACVK,KAAKC,SAAWzB,OAAA0B,SAAYF,KAAAT,SAAAY,aAE/BJ,MAEJJ,cARDS,QAAAC,cAAA,SAAAd,GAWI,OAAOf,OAAO8B,YAAYf,EAAUS,KAAKT,WAC5CI,cAFDS,QAAAG,SAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAKI,IAAIC,EAAU,IAAIC,QAAQ,CAACC,QAASd,KAAKe,IAAKC,UAAWR,EAAQC,MAAOA,EAAOC,MAAOA,EAAOO,GAAAA,KADjGtB,QAAAA,IAAcS,GACVQ,EAAIA,KAAUD,IAAmDF,OAAAA,QAAvCpC,SAAA6C,MAAA,UAAAvB","file":"usuario.min.js","sourcesContent":["var mongoose = require('mongoose');\nconst uniqueValidator = require ('mongoose-unique-validator');\nvar Reserva = require ('./reserva');\nconst bcrypt = require('bcrypt');\nconst saltRounds = 10;\n\n\nvar Schema = mongoose.Schema;\n\nconst validateEmail = function(email) {\n    const re= /^(([^<>()\\[\\]\\.,;:\\s@\\”]+(\\.[^<>()\\[\\]\\.,;:\\s@\\”]+)*)|(\\”.+\\”))@(([^<>()[\\]\\.,;:\\s@\\”]+\\.)+[^<>()[\\]\\.,;:\\s@\\”]{2,})$/;\n    return re.test(email);\n};\n\nvar UsuarioSchema = new Schema ({\n    nombre: {\n        type: String,\n        trim: true,\n        required: [true, 'El nombre es obligatorio']\n    },\n    email: {\n        type: String,\n        trim: true,\n        required: [true, 'El email es obligatorio'],\n        lowercase: true,\n        unique: true,\n        validate: [validateEmail, 'POr favor, ingrese un email válido'],\n        match: [/^(([^<>()\\[\\]\\.,;:\\s@\\”]+(\\.[^<>()\\[\\]\\.,;:\\s@\\”]+)*)|(\\”.+\\”))@(([^<>()[\\]\\.,;:\\s@\\”]+\\.)+[^<>()[\\]\\.,;:\\s@\\”]{2,})$/]\n    },\n    password: {\n        type: String,\n        required: [true, 'El password es obligatorio']\n    },\n    passwordResetToken: String,\n    passwordResetTokenExpires: Date,\n    verificado: {\n        type: Boolean,\n        default: false\n    }\n\n});\n\nusuarioSchema.plugin( uniqueValidator, { message: 'El {PATH} ya existe con otro usuario'}),\n\n\nusuarioSchema.pre('save', function(next){\n    if (this.isMOdified('password')){\n        this.password = bcrypt.hashSync(this.password, saltRounds);\n    }\n    next();\n});\n\nusuarioSchema.methods.validPassword = function(password){\n    return bcrypt.compareSync(password, this.password);\n}\n\nusuarioSchema.methods.reservar = function(biciId, desde, hasta, cb){\n    var reserva = new Reserva({usuario: this.id_, bicicleta: biciId, desde: desde, hasta: hasta, cd});\n    console.log(reserva);\n    reserva.save(cb);\n}\n\nmodule.exports = mongoose.model('Usuario', usuarioSchema)"]}