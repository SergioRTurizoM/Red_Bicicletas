{"version":3,"sources":["usuario.js"],"names":["mongoose","require","uniqueValidator","Reserva","bcrypt","saltRounds","Schema","validateEmail","email","re","test","UsuarioSchema","nombre","type","String","trim","required","lowercase","unique","validate","match","password","passwordResetToken","passwordResetTokenExpires","Date","verificado","Boolean","usuarioSchema","plugin","message","pre","next","isMOdified","hashSync","methods","validPassword","compareSync","reservar","biciId","desde","hasta","cb","reserva","usuario","id_","bicicleta","cd","console","log","save","module","exports","model"],"mappings":";;AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMC,eAAe,GAAGD,OAAO,CAAE,2BAAF,CAA/B;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAE,WAAF,CAArB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMI,UAAU,GAAG,EAAnB;AAGA,IAAIC,MAAM,GAAGN,QAAQ,CAACM,MAAtB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAASC,KAAT,EAAgB;AAClC,MAAMC,EAAE,GAAE,uHAAV;AACA,SAAOA,EAAE,CAACC,IAAH,CAAQF,KAAR,CAAP;AACH,CAHD;;AAKA,IAAIG,aAAa,GAAG,IAAIL,MAAJ,CAAY;AAC5BM,EAAAA,MAAM,EAAE;AACJC,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,IAAI,EAAE,IAFF;AAGJC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,0BAAP;AAHN,GADoB;AAM5BR,EAAAA,KAAK,EAAE;AACHK,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,IAAI,EAAE,IAFH;AAGHC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,yBAAP,CAHP;AAIHC,IAAAA,SAAS,EAAE,IAJR;AAKHC,IAAAA,MAAM,EAAE,IALL;AAMHC,IAAAA,QAAQ,EAAE,CAACZ,aAAD,EAAgB,oCAAhB,CANP;AAOHa,IAAAA,KAAK,EAAE,CAAC,uHAAD;AAPJ,GANqB;AAe5BC,EAAAA,QAAQ,EAAE;AACNR,IAAAA,IAAI,EAAEC,MADA;AAENE,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,4BAAP;AAFJ,GAfkB;AAmB5BM,EAAAA,kBAAkB,EAAER,MAnBQ;AAoB5BS,EAAAA,yBAAyB,EAAEC,IApBC;AAqB5BC,EAAAA,UAAU,EAAE;AACRZ,IAAAA,IAAI,EAAEa,OADE;AAER,eAAS;AAFD;AArBgB,CAAZ,CAApB;AA4BAC,aAAa,CAACC,MAAd,CAAsB1B,eAAtB,EAAuC;AAAE2B,EAAAA,OAAO,EAAE;AAAX,CAAvC,GAGAF,aAAa,CAACG,GAAd,CAAkB,MAAlB,EAA0B,UAASC,IAAT,EAAc;AACpC,MAAI,KAAKC,UAAL,CAAgB,UAAhB,CAAJ,EAAgC;AAC5B,SAAKX,QAAL,GAAgBjB,MAAM,CAAC6B,QAAP,CAAgB,KAAKZ,QAArB,EAA+BhB,UAA/B,CAAhB;AACH;;AACD0B,EAAAA,IAAI;AACP,CALD,CAHA;;AAUAJ,aAAa,CAACO,OAAd,CAAsBC,aAAtB,GAAsC,UAASd,QAAT,EAAkB;AACpD,SAAOjB,MAAM,CAACgC,WAAP,CAAmBf,QAAnB,EAA6B,KAAKA,QAAlC,CAAP;AACH,CAFD;;AAIAM,aAAa,CAACO,OAAd,CAAsBG,QAAtB,GAAiC,UAASC,MAAT,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA+BC,EAA/B,EAAkC;AAC/D,MAAIC,OAAO,GAAG,IAAIvC,OAAJ,CAAY;AAACwC,IAAAA,OAAO,EAAE,KAAKC,GAAf;AAAoBC,IAAAA,SAAS,EAAEP,MAA/B;AAAuCC,IAAAA,KAAK,EAAEA,KAA9C;AAAqDC,IAAAA,KAAK,EAAEA,KAA5D;AAAmEM,IAAAA,EAAE,EAAFA;AAAnE,GAAZ,CAAd;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACAA,EAAAA,OAAO,CAACO,IAAR,CAAaR,EAAb;AACH,CAJD;;AAMAS,MAAM,CAACC,OAAP,GAAiBnD,QAAQ,CAACoD,KAAT,CAAe,SAAf,EAA0BzB,aAA1B,CAAjB","sourcesContent":["var mongoose = require('mongoose');\nconst uniqueValidator = require ('mongoose-unique-validator');\nvar Reserva = require ('./reserva');\nconst bcrypt = require('bcrypt');\nconst saltRounds = 10;\n\n\nvar Schema = mongoose.Schema;\n\nconst validateEmail = function(email) {\n    const re= /^(([^<>()\\[\\]\\.,;:\\s@\\”]+(\\.[^<>()\\[\\]\\.,;:\\s@\\”]+)*)|(\\”.+\\”))@(([^<>()[\\]\\.,;:\\s@\\”]+\\.)+[^<>()[\\]\\.,;:\\s@\\”]{2,})$/;\n    return re.test(email);\n};\n\nvar UsuarioSchema = new Schema ({\n    nombre: {\n        type: String,\n        trim: true,\n        required: [true, 'El nombre es obligatorio']\n    },\n    email: {\n        type: String,\n        trim: true,\n        required: [true, 'El email es obligatorio'],\n        lowercase: true,\n        unique: true,\n        validate: [validateEmail, 'POr favor, ingrese un email válido'],\n        match: [/^(([^<>()\\[\\]\\.,;:\\s@\\”]+(\\.[^<>()\\[\\]\\.,;:\\s@\\”]+)*)|(\\”.+\\”))@(([^<>()[\\]\\.,;:\\s@\\”]+\\.)+[^<>()[\\]\\.,;:\\s@\\”]{2,})$/]\n    },\n    password: {\n        type: String,\n        required: [true, 'El password es obligatorio']\n    },\n    passwordResetToken: String,\n    passwordResetTokenExpires: Date,\n    verificado: {\n        type: Boolean,\n        default: false\n    }\n\n});\n\nusuarioSchema.plugin( uniqueValidator, { message: 'El {PATH} ya existe con otro usuario'}),\n\n\nusuarioSchema.pre('save', function(next){\n    if (this.isMOdified('password')){\n        this.password = bcrypt.hashSync(this.password, saltRounds);\n    }\n    next();\n});\n\nusuarioSchema.methods.validPassword = function(password){\n    return bcrypt.compareSync(password, this.password);\n}\n\nusuarioSchema.methods.reservar = function(biciId, desde, hasta, cb){\n    var reserva = new Reserva({usuario: this.id_, bicicleta: biciId, desde: desde, hasta: hasta, cd});\n    console.log(reserva);\n    reserva.save(cb);\n}\n\nmodule.exports = mongoose.model('Usuario', usuarioSchema)"],"file":"usuario.dev.js"}